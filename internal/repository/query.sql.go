// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
	"net"
	"time"

	"github.com/google/uuid"
)

const count = `-- name: Count :one
SELECT COUNT(*) FROM guest
`

func (q *Queries) Count(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, count)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findAll = `-- name: FindAll :many
SELECT id, message, ip, created_at, updated_at
FROM guest
ORDER BY created_at DESC
LIMIT $1
`

func (q *Queries) FindAll(ctx context.Context, limit int32) ([]Guest, error) {
	rows, err := q.db.Query(ctx, findAll, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Guest
	for rows.Next() {
		var i Guest
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.Ip,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insert = `-- name: Insert :one
INSERT INTO guest (id, message, created_at, updated_at, ip)
VALUES ($1, $2, $3, $3, $4)
RETURNING id, message, ip, created_at, updated_at
`

type InsertParams struct {
	ID        uuid.UUID
	Message   string
	CreatedAt time.Time
	Ip        net.IP
}

func (q *Queries) Insert(ctx context.Context, arg InsertParams) (Guest, error) {
	row := q.db.QueryRow(ctx, insert,
		arg.ID,
		arg.Message,
		arg.CreatedAt,
		arg.Ip,
	)
	var i Guest
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.Ip,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
